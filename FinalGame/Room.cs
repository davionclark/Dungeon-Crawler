using System.Collections;
using System.Collections.Generic;
using System;
using System.Runtime.CompilerServices;

namespace StarterGame
{
    public class Room
    {
        Dictionary<string, object> userInfo = new Dictionary<string, object>();
        private Dictionary<string, Door> exits;
        private Dictionary<Room, string> descriptions= new Dictionary<Room, string>();
        private string originalTag;
        private string _tag;
        private string _altTag;
        private List<Item> itemList = new List<Item>();
        private Dictionary<Room, List<Item>> itemsInRooms = new Dictionary<Room, List<Item>>(); 

        public int roomID { get; set; }
        public string tag
        {
            get
            {
                return _tag;
            }
            set
            {
                _tag = value;
            }
        }

        public string altTag //Alt tag is used for the description generated by LookCommand.
        {
            get
            {
                return _altTag;
            }
            set
            {
                _altTag = value;
            }
        }
        public Room(string tag) : this(tag, "\nThere is nothing else to see.")
        {

        }
        public Room(string tag, string altTag)
        {
            exits = new Dictionary<string, Door>();
            this.tag = tag;
            this.altTag = altTag;
        }

        public void setExit(string exitName, Door door)
        {
            exits.Add(exitName, door);
        }
        public Door getExit(string exitName)
        {
            Door door = null;
            exits.TryGetValue(exitName, out door);
            return door;
        }

        public string getExits()
        {
            string exitNames = "Exits: ";
            Dictionary<string, Door>.KeyCollection keys = exits.Keys;
            foreach (string exitName in keys)
            {
                exitNames += " " + exitName;
            }

            return exitNames;
        }

        public string description()
        {
            return this.tag + "\n *** " + this.getExits();
        }
        public string altDescription() //Prints alt description
        {
            return this.altTag + "\n *** " + this.getExits();
        }

        public void addItem(Item item) //Adds items to a room
        {
            string placeholder = null;
            if (descriptions != null)
            {
                if (!descriptions.ContainsKey(this)) //If room doesn't have an original description add one, else set the original description to its original state.
                {
                    originalTag = altTag;
                    descriptions.Add(this, originalTag);
                }
                else
                {
                    descriptions.TryGetValue(this, out originalTag);
                }
            }
            itemList.Add(item);
             
            if (itemsInRooms.ContainsKey(this)) //If the key in the dictionary already exists, overwrite the values. Prevents duplicate key errors.
            {
                itemsInRooms[this] = itemList;
            }
            else //Creates a new list of items for a room
            {
                itemsInRooms.Add(this, itemList);
            }
            foreach (Item itemX in itemList) //Concatenates the description of all items in the itemList onto the placeholder string.
            {
                placeholder += itemX.Description;
            }
            originalTag += placeholder;
            altTag = originalTag;
        }

        
        public void removeItem(Item item) //Removes an item from rooms
        {

            if (descriptions != null)
            {
                descriptions.TryGetValue(this, out string value);

                itemList.Remove(item); //Removes an item from the list of items within the room.

                if (itemList.Count == 0)
                {
                    altTag = value;
                }
                else
                {
                    altTag = value;
                    foreach (Item itemX in itemList) //Concatenates descriptions of the items in the list, minus the ones removed.
                    {
                        altTag = value + itemX.Description;
                    }
                }
            }
        }

        public Item getItem(string itemName) //Returns an item if it exists within the room.
        {
            if (itemsInRooms != null)
            {
                if (itemsInRooms.TryGetValue(this, out itemList))
                {
                    foreach (Item item in itemList)
                    {
                        if (item.Name == itemName)
                        {
                            return item;
                        }
                    }
                }
            }
            return null;
        }
    }
}
